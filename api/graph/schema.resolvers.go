package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"log"

	"github.com/IrrelevantElephant/instaphant/api/graph/model"
)

// UpsertPost is the resolver for the upsertPost field.
func (r *mutationResolver) UpsertPost(ctx context.Context, input model.PostInput) (*model.Post, error) {
	id := newId()
	var post model.Post
	post.Author = &model.User{
		ID:   newId(),
		Name: *input.Author,
	}
	post.ID = id
	post.Description = *input.Description
	post.Image = *input.Image

	n := len(r.Resolver.PostStore)
	if n == 0 {
		r.Resolver.PostStore = make(map[string]model.Post)
	}

	r.Resolver.PostStore[post.ID] = post
	return &post, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	post, ok := r.PostStore[id]
	if !ok {
		return nil, fmt.Errorf("not found")
	}
	return &post, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	posts := make([]*model.Post, 0)

	session, err := createConnection()

	if err != nil {
		log.Fatalf("Issue creating connection to database: %s", err.Error())
	}

	scanner := session.Query("SELECT (id, author_id, author_name, description, image) FROM instaphant.post;").WithContext(ctx).Iter().Scanner()
	for scanner.Next() {
		var (
			id          string
			author_id   string
			author_name string
			description string
			image       string
		)

		err := scanner.Scan(&id, &author_id, &author_name, &description, &image)

		if err != nil {
			log.Fatal(err)
		}

		post := model.Post{
			ID:          id,
			Description: description,
			Image:       image,
			Author: &model.User{
				ID:   author_id,
				Name: author_name,
			},
		}

		posts = append(posts, &post)
	}

	err = scanner.Err()
	if err != nil {
		log.Print(err)
	}

	return posts, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
